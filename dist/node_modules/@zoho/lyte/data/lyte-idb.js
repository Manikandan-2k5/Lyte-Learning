var LyteIDB = {
    isProcessing:false,
    restoreData:false,
    maintainOrder:false,
    idbNamePrefix:"lidb_",
    idb:{},
    getBlobURL:function( url ) {
      return URL.createObjectURL( new Blob( [ "importScripts( '"+ url +"' );" ], { type: "text/javascript" } ) );
    },
    changeIDBState:function(rec, parent){
      rec.$.inIDB = rec.$.inIDB || {};
      if(parent){
        rec.$.inIDB[parent.model] = rec.$.inIDB[parent.model] || new Map();
        rec.$.inIDB[parent.model].set(parent.pK, true);
      }
      else{
        Object.defineProperty(rec.$.inIDB, "self", {
          value: true
        });
      }
      var relMod = store.model[rec.$.model._name] && store.model[rec.$.model._name].idb ? store.model[rec.$.model._name].idb.deserializeKeys : undefined;
      if(relMod){
        for(var k=0;k<relMod.length;k++){
          var rel = rec.$.model.fieldList[relMod[k]];
          if(rec.hasOwnProperty(relMod[k]) && rel.relType == "hasMany"){
            if(Array.isArray(rec[relMod[k]])){
              for(var p=0; p<rec[relMod[k]].length; p++){
                if(Lyte.isRecord(rec[relMod[k]][p])){
                  this.changeIDBState(rec[relMod[k]][p], parent ? parent : {model:rec.$.model._name, pK:rec.$.pK});
                }
              }
              rec[relMod[k]].inIDB = rec[relMod[k]].inIDB || Object.defineProperty(rec[relMod[k]], "inIDB", {value: {}});
              if(parent){
                rec[relMod[k]].inIDB[parent.model] = rec[relMod[k]].inIDB[parent.model] || new Map();
                rec[relMod[k]].inIDB[parent.model].set(parent.pK, true);        
              }
              else{
                rec[relMod[k]].inIDB.self = true;
              }
            }
            else if(Lyte.isRecord(rec[relMod[k]])){
              this.changeIDBState(rec[relMod[k]], parent ? parent : {model:rec.$.model._name, pK:rec.$.pK});
            }
          }
        }
      }
    },
    initWorker: function(url){
      return new Promise(function(resolve, reject){
          var worker = LyteIDB.worker = new Worker(LyteIDB.getBlobURL(url));
          worker.onmessage = function(event){
            var obj = event.data;
            if(obj && obj.lyteidb){
              if(obj.type == "open"){
                if(obj.msg != "error"){
                  if(store.adapter.application == undefined || !store.adapter.application.differIDBAction){
                    setTimeout(function(){
                      LyteIDB.triggerIDBInsertion();
                    },0);
                  }
                  Object.defineProperty(LyteIDB, "isIDBOpened", { value : true});
                  Object.defineProperty(store.$, "idbOpen", { value : false});
                  var host = window.location.host, 
                  idb = localStorage.getItem("idb"+host); 
                  if(idb == undefined){
                    localStorage.setItem("idb"+host,1);
                  }
                  else{
                    idb = parseInt(idb);
                    localStorage.setItem("idb"+host,idb+1);
                  }
                  if(LyteIDB.restoreData === false){
                    window.addEventListener("beforeunload",function(){
                        LyteIDB.removeCurrentIDB();
                    });
                  }
                  // return resolve(worker);
                }
                // else{
                //   // return reject();
                // }
              }
              else if(obj.qProcess =="completed4"){
                var key = Object.keys(store.$.idbQ2)[0]
                var arr = obj.data || [];
                arr.forEach(function(item,index){
                  var rec = store.peekRecord(key,item);
                  if(Lyte.isRecord(rec)){
                    rec.$.inIDB = true;
                  }
                });
                delete store.$.idbQ2[key];
                LyteIDB.isProcessing = false;        
              }
              else if(obj.hasOwnProperty("code")){
                var req = obj.req;
                var q = LyteIDB[obj.model][obj.req];
                var reqObj = (req == "findRecord") ? q[obj.key].splice(0,1)[0] : q.splice(0,1)[0];
                if(obj.code == 200){
                  if(reqObj && reqObj.resolve){
                    reqObj.resolve(obj.data);
                  }
                }else if(obj.code == 400){
                  if(reqObj && reqObj.reject){
                    reqObj.reject();
                  }
                }
                if(q.length == 0){
                  delete LyteIDB[obj.model][obj.req];
                }
              }
              else if(obj.pause){
                var reqObj = LyteIDB[obj.model][obj.req];
                var pause = localStorage.getItem("pause");
                localStorage.setItem("pause",!pause);
                if(reqObj){
                  reqObj = !Array.isArray(reqObj) ? [reqObj] : reqObj;
                  reqObj.forEach(function(reqItm){
                    if(reqItm && reqItm.reject){
                      reqItm.reject();
                    }
                  });
                }
              }
              else if(obj.init == "done"){
                return resolve(worker);
              }
            }
            if(Object.keys(store.$.idbQ2).length == 0){
              LyteIDB.isProcessing = false;
            }
          };
          worker.onerror = function(event){ 
            reject();
          }
      });
    },
    init: function(opts){
      var hasAnotherTab = false, host = window.location.host;
      localStorage.setItem(host+"parent", Date.now());
      window.addEventListener("storage", function(ev){
          if(ev.key == host+"child"){
              hasAnotherTab = true;
          }
          if(ev.key == host+"parent"){
            localStorage.setItem(host+"child", Date.now());
          }
      });
      var self = this;
      return new Promise(function(resolve, reject){
        var version = opts ? opts.version : undefined,
        restoreData = LyteIDB.restoreData = opts && opts.hasOwnProperty("restoreData") ? opts.restoreData : LyteIDB.restoreData, 
        models = [],
        idbname = LyteIDB.idbNamePrefix+opts.name;
        LyteIDB.initWorker(opts?opts.url:undefined).then(function(worker){
          for(var key in store.model){
            var mdl = store.model[key];
            if(mdl.hasOwnProperty("idb")){
              var pK = store.model[key]._pK;
              var pObj = {modelName:key,pK:pK};
              if(mdl.idb.hasOwnProperty("maintainOrder")){
                pObj.maintainOrder = mdl.idb.maintainOrder;
              }
              models.push(pObj);
            }
          }
          var scope = store.$.cbScp("application", "idbBeforeOpen", "adapter"), args;
          if(scope){
            models = store.$.cB(scope, [models]);
          }
          setTimeout(function(){
              if(!hasAnotherTab){
                  if(restoreData === false){
                    localStorage.setItem("idb"+host, 1);
                    LyteIDB.removeIDBDatabase().then(function(){
                      worker.postMessage({tolyteidb:true,models:models, type:"open", version:version, maintainOrder:LyteIDB.maintainOrder, name:idbname});
                      models = [];
                    });
                  }
                  else{
                    worker.postMessage({tolyteidb:true,models:models, type:"open", version:version, maintainOrder:LyteIDB.maintainOrder, name:idbname});
                    models = [];
                  }
              }
              else{
                worker.postMessage({tolyteidb:true,models:models, type:"open", version:version, maintainOrder:LyteIDB.maintainOrder, name:idbname});
                models = [];
              }
              localStorage.removeItem(window.location.host+"child");
              localStorage.removeItem(window.location.host+"parent");
          },20);
          worker.onmessage = function(event){
            var obj = event.data;
            if(obj && obj.lyteidb){
              if(obj.type == "open"){
                if(obj.msg != "error"){
                  if(store.adapter.application == undefined || !store.adapter.application.differIDBAction){
                    setTimeout(function(){
                      LyteIDB.triggerIDBInsertion();
                    },0);
                  }
                  Object.defineProperty(LyteIDB, "isIDBOpened", { value : true});
                  Object.defineProperty(store.$, "idbOpen", { value : false});
                  LyteIDB.idb[idbname] = true;
                  var host = window.location.host, 
                  idb = localStorage.getItem("idb"+host); 
                  if(idb == undefined){
                    localStorage.setItem("idb"+host,1);
                  }
                  else{
                    idb = parseInt(idb);
                    localStorage.setItem("idb"+host,idb+1);
                  }
                  if(LyteIDB.restoreData === false){
                    window.addEventListener("beforeunload",function(){
                        LyteIDB.removeCurrentIDB();
                    });
                  }
                  return resolve();
                }
                else{
                  return reject();
                }
              }
              else if(obj.qProcess =="completed4"){
                var key = Object.keys(store.$.idbQ2)[0]
                var arr = obj.data || [];
                arr.forEach(function(item,index){
                  var rec = store.peekRecord(key,item);
                  if(Lyte.isRecord(rec)){
                    self.changeIDBState(rec);
                    // rec.$.inIDB = true;
                  }
                });
                delete store.$.idbQ2[key];
                LyteIDB.isProcessing = false;        
              }
              else if(obj.hasOwnProperty("code")){
                var req = obj.req;
                var q = LyteIDB[obj.model][obj.req];
                var reqObj = (req == "findRecord") ? q[obj.key].splice(0,1)[0] : q.splice(0,1)[0];
                if(obj.code == 200){
                  if(reqObj && reqObj.resolve){
                    reqObj.resolve(obj.data);
                  }
                }else if(obj.code == 400){
                  if(reqObj && reqObj.reject){
                    reqObj.reject();
                  }
                }
                if(q.length == 0){
                  delete LyteIDB[obj.model][obj.req];
                }
              }
              else if(obj.pause){
                var reqObj = LyteIDB[obj.model][obj.req];
                var pause = localStorage.getItem("pause");
                localStorage.setItem("pause",!pause);
                if(reqObj){
                  reqObj = !Array.isArray(reqObj) ? [reqObj] : reqObj;
                  reqObj.forEach(function(reqItm){
                    if(reqItm && reqItm.reject){
                      reqItm.reject();
                    }
                  });
                }
              }
            }
            if(Object.keys(store.$.idbQ2).length == 0){
              LyteIDB.isProcessing = false;
            }            
          }
          // resolve(); 
        }, function(){
          reject();
        });
      });
    },
    removeCurrentIDB: function(){
      return new Promise(function(resolve, reject){
        var host = window.location.host, 
        idb = localStorage.getItem("idb"+host);
        if(idb == undefined || parseInt(idb) - 1 == 0){
          for(var ikey in LyteIDB.idb){
            var ret = LyteIDB.removeIDBDatabase(ikey);
            console.log(ret);
            // .then(function(){
            //   return resolve();
            // }, function(){
            //   return reject();
            // });
          }
        }
        else{
          localStorage.setItem("idb"+host,parseInt(idb) - 1);
          return resolve();
        }
      });
    },
    deleteIDB: function(name){
      return new Promise(function(resolve, reject){
        var trans = indexedDB.deleteDatabase(name);
        trans.onsuccess = function(){
          return resolve();
        }
        trans.onerror = function(){
          return reject();
        }
      });

    },
    removeIDBDatabase : function(){
      return new Promise(function(resolve, reject){
          indexedDB.databases().then(function(arr){
            var len = arr.length, obj, j=0, lidbcount = 0;
            for(var i=0;i<len;i++){
              obj = arr[i];
              if(obj.name.startsWith(LyteIDB.idbNamePrefix)){
                lidbcount++;
                LyteIDB.deleteIDB(obj.name).then(function(){
                  if(++j == lidbcount){
                    localStorage.removeItem("idb"+window.location.host);
                    LyteIDB.didInit = false;
                    resolve();
                  }
                }, function(){
                  if(++j == lidbcount){
                    localStorage.removeItem("idb"+window.location.host);
                    LyteIDB.didInit = false;
                    resolve();
                  }
                });
              }
            }
            if(!len || !lidbcount){
              resolve();
            }
          });
        });
    },
    postMessage:function(obj){
      if(LyteIDB.isIDBOpened){
          var itm = { model: obj.model, key: obj.key, type: obj.req, customData: obj.customData, queryParams: obj.queryParams};
          delete obj.customData;
          var idbNameRes = store.$.initCB("adapter", itm.model, "getIdbName", {args:[itm.model]}), idbName;
          if(idbNameRes){
            idbName = LyteIDB.idbNamePrefix+idbNameRes.data;
          }
          var res, cData;
          res = store.$.initCB("serializer", itm.model, "beforeIDBGet", {args:[itm]});
          if(res){
            cData = res.data;
            if(cData && typeof cData == "object"){
              delete cData.type;
              Object.assign(obj,cData)
              // LyteIDB.worker.postMessage(obj);
            }
            else{
              if(obj && obj.reject){
                obj.reject();
              }
            }
          }
          if(obj.resolve && obj.reject){
            LyteIDB[obj.model] = LyteIDB[obj.model] || {};
            var qObj = {key:obj.key, resolve : obj.resolve, reject: obj.reject, queryParams: obj.queryParams, req: obj.req};
            if(obj.req == "findRecord"){
              var typeQ = LyteIDB[obj.model][obj.req] = LyteIDB[obj.model][obj.req] || {};
              var q = typeQ[obj.key] = typeQ[obj.key] || []
              q.push(qObj); 
            }
            else{
              var q = LyteIDB[obj.model][obj.req] = LyteIDB[obj.model][obj.req] || [];
              q.push(qObj); 
            }
            delete obj.resolve;
            delete obj.reject;
          }
          obj.tolyteidb = true;
          obj.name = idbName;
          LyteIDB.worker.postMessage(obj);
      }
      else if(obj && obj.reject){
        obj.reject();
      }
    },
    IDBInsert:function(){
      var isProcessing = LyteIDB.isProcessing;
      if(!isProcessing && Object.keys(store.$.idbQ2).length){
        var module = Object.keys(store.$.idbQ2)[0];
        while(module && store.$.idbQ2[module] && store.$.idbQ2[module].length == 0){
          delete store.$.idbQ2[module];
          module = Object.keys(store.$.idbQ2)[0];
        }
        if(module){
            var q = store.$.idbQ2[module], pK = store.modelFor(module)._pK, newQ = [];
            var idbNameRes = store.$.initCB("adapter", module, "getIdbName", {args:[module]}), idbName;
            if(idbNameRes){
              idbName = LyteIDB.idbNamePrefix + idbNameRes.data;
            }
            if(q.length){
              q.forEach(function(itm){
                var res, cData;
                res = store.$.initCB("serializer", itm.model, "beforeIDBCrud", {args:[itm]});
                if(res){
                  cData = res.data;
                  if(cData){
                    delete cData.customData;
                    newQ.push(cData);
                  }
                }
                else{
                  newQ.push(itm);
                }
              });
              if(newQ.length){
                LyteIDB.isProcessing = {q:q, module:module};
                console.log(Array.from(q));
                LyteIDB.worker.postMessage({tolyteidb:true, type:"push", module:module,data:q,pK:pK,name:idbName});        
              }
              else{
                delete store.$.idbQ2[module];
              }
            }
            else{
              delete store.$.idbQ2[module];
            }
        }
      }
      if(Object.keys(store.$.idbQ2).length == 0){
        LyteIDB.isProcessing = false;
      }    
    },
    triggerIDBInsertion:function(){
      setInterval(function(){
        setTimeout(LyteIDB.IDBInsert,0);    
      },50);
    }
}


